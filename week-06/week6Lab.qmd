---
title: "Lab 6"
format: gfm
---

# Outline of HW 1 solution

- Assign initial values and generate an excess of outcomes for each treatment
- Write out function that generate draws from posterior, updates allocation probs,
estimates max prob of trt being better than control, and prints sample sizes.
- Write out design one function with arguments needed for postdraws
- Write out design two function with arguments with necessary arguments
- Set-up initially to determine number of looks in the case of residuals/otherwise, etc.
- Utilize postdraws function as necessary.

# Part 2: Compare efficiency between submission and solution
```{r echo=FALSE}
# Homework 1 solutions
N <- 228
arms <- 4
h0 <- 0.35
h1 <- 0.35
h2 <- 0.35
h3 <- 0.35



# Generate draws from posterior and calculate pmax
postDraws <- function(y,nMcmc,h0,h1,h2,h3,n0,n1,n2,n3){
  
  #------------------------------
  # Generate draws from posterior
  #------------------------------
  postDraws0 <- rbeta(n=nMcmc, shape1 = h0 + sum(y[1:n0,"0"]==1), shape2 = (1-h0) + n0 - sum(y[1:n0,"0"]==0))
  postDraws1 <- rbeta(n=nMcmc, shape1 = h1 + sum(y[1:n1,"1"]==1), shape2 = (1-h1) + n1 - sum(y[1:n1,"1"]==0))
  postDraws2 <- rbeta(n=nMcmc, shape1 = h2 + sum(y[1:n2,"2"]==1), shape2 = (1-h2) + n2 - sum(y[1:n2,"2"]==0))
  postDraws3 <- rbeta(n=nMcmc, shape1 = h3 + sum(y[1:n3,"3"]==1), shape2 = (1-h3) + n3 - sum(y[1:n3,"3"]==0))
  
  #-----------------------------------
  # Calculate allocation probabilities
  #-----------------------------------
  # v1-v3 probability each arm is best
  # v0 see RMatch Viele et al. 2020
  pBest <- pmax(postDraws0,postDraws1,postDraws2,postDraws3)
  
  v1 <- mean(pBest==postDraws1)
  v2 <- mean(pBest==postDraws2)
  v3 <- mean(pBest==postDraws3)
  
  v0 <- min(sum( c(v1,v2,v3) * (c( n1, n2, n3) + 1) / (n0 + 1), max(v1, v2, v3)) )
  
  # Standardize
  V0 <- v0 / (sum(v0,v1,v2,v3))
  V1 <- v1 / (sum(v0,v1,v2,v3))
  V2 <- v2 / (sum(v0,v1,v2,v3))
  V3 <- v3 / (sum(v0,v1,v2,v3))
  
  # Calculate probability each arm is greater than control
  p1 <- mean(postDraws1 > postDraws0)
  p2 <- mean(postDraws2 > postDraws0)
  p3 <- mean(postDraws3 > postDraws0)
  
  # Report maximum probablity an arm is greater than control
  pMax <- max(p1,p2,p3)
  # unname n0 objects for consistent object names in output
  n0 <- unname(n0)
  n1 <- unname(n1)
  n2 <- unname(n2)
  n3 <- unname(n3)
  out <- c(V0=V0,V1=V1,V2=V2,V3=V3,p1=p1,p2=p2,p3=p3,pMax=pMax,n0=n0,n1=n1,n2=n2,n3=n3)
  return(out)
  
}



design1 <- function(y, nMcmc=10000, h0, h1, h2, h3){
  
  # By the end of the study, each arm will have equal allocation
  postDraws(y=y,nMcmc=nMcmc,
            n0=nrow(y)/ncol(y),
            n1=nrow(y)/ncol(y),
            n2=nrow(y)/ncol(y),
            n3=nrow(y)/ncol(y),
            h0=h0, h1=h1, h2=h2, h3=h3)
  
}

design2 <- function(y, N, nInterim, h0, h1, h2, h3){
  
  #-----------------------------------------------
  # Set up parameters to inform interim monitoring
  #-----------------------------------------------
  
  # arms and looks as derived from y and look attributes
  arms         <- ncol(y)
  looks        <- floor(N / nInterim)
  
  # n at time t with n = 10 for each arm at t = 1
  nt           <- matrix(NA,nrow=looks,ncol=arms)
  colnames(nt) <- 0:(arms-1)
  nt[1,]       <- rep(nInterim / arms,arms)
  
  # Number of observations between each look
  # Account for possibility of no residual number of nInterim looks
  if(N %% nInterim != 0) {
    residual <- N %% nInterim
  } else {
    residual <- NULL
  }
  size         <- c(rep(nInterim,looks - 1),residual)
  
  
  
  #---------------------------------------------------------------
  # Update allocation probabilities and nt for each look iteration
  #---------------------------------------------------------------
  for(i in seq(looks-1)){
    
    alloProbs <- postDraws(y=y, nMcmc = 1000, h0=h0,h1=h1,h2=h2,h3=h3,
                           n0 = nt[i,"0"],
                           n1 = nt[i,"1"],
                           n2 = nt[i,"2"],
                           n3 = nt[i,"3"])
    
    nt[i+1,] <- nt[i,] + c(rmultinom(n = 1, size = size[i], 
                                     prob = alloProbs[c("V0","V1","V2","V3")]))
    
  }
  
  #--------------------------------------------------------
  # Report final probabilities of best arm and sample sizes
  #--------------------------------------------------------
  post <- postDraws(y=y, nMcmc = 1000, h0=h0,h1=h1,h2=h2,h3=h3,
                    n0 = nt[i,"0"],
                    n1 = nt[i,"1"],
                    n2 = nt[i,"2"],
                    n3 = nt[i,"3"])
  
  return(post)
  
}


# Generate outcomes under null
y0 <- rbinom(N,size=1,prob=h0)
y1 <- rbinom(N,size=1,prob=h1)
y2 <- rbinom(N,size=1,prob=h2)
y3 <- rbinom(N,size=1,prob=h3)

y <- cbind("0"=y0,"1"=y1,"2"=y2,"3"=y3)

# DesignRAR
# allocationUpdate
## Update allocation probability after posterior draws
allocationUpdate <- function(post_y_all, n_samp){
  pt_max0 <- apply(post_y_all, 1, which.max) # Identify trt with max prob
  pt_max <- c(mean(pt_max0==1), mean(pt_max0==2),
              mean(pt_max0==3), mean(pt_max0==4)) # Compute relative freq
  V_0 <- min(sum(pt_max[-1] * (n_samp[-1]+1)/(n_samp[1]+1)),
             max(pt_max[-1])) # Allocation prob for control
  V_t <- c(V_0, pt_max[-1]) # Allocation probs for all treatments
  allocation_prob <- V_t/sum(V_t) # Normalize allocation probabilities
  return(allocation_prob)
}

# treatmentComparison
## Compare treatments with control and select best
treatmentComparison <-  function(post_y_all){
  comparisonMeans <- apply(post_y_all, 1, which.max)
  allMeans <- c(mean(comparisonMeans==1), mean(comparisonMeans==2),
                mean(comparisonMeans==3), mean(comparisonMeans==4)) # Compute relative freq
  output <- which.max(allMeans) - 1
  # Print output
  return(output)
}

designRAR <- function(N_samp = 228, # Total number of participants
                       trt_n = 4, # Number of Arms
                       trt_effect = rep(0.35,4), # treatment effect for each arm 
                       alpha = 0.35,  beta = 0.65, # prior
                       n_post = 1000, # number of posterior draws
                       allocation_size = 40, # Initial Sample to allocate
                       design_option = "RMatch" # Design option: c("F25", "RMatch") 
                       ){
  # Condition to use F25 (Design 1):
  allocation_size <- ifelse(design_option=="F25", N_samp, allocation_size)
  allocation_prob <- rep(1,trt_n)/trt_n # Equal allocation
  
  # Definition of outcome possibilities given treatment effect within each arm
  Y0 <- do.call(cbind,lapply(1:4, function(x){
    rbinom(N_samp,1,trt_effect[x])
  }))
  
  # Compute # of interim allocation steps needed
  interim_steps <- ceiling(N_samp/allocation_size)
  for(j in 1:interim_steps){
    # Define allocation probabilities and randomly assign outcomes
    if(j==1){ # First time, allocate equally across treatments
      n_allocate <- round(allocation_prob*allocation_size)
      n_samp <-n_allocate # Note sample sizes
      Y <- lapply(1:4, function(x){# Randomly assign outcome respectively
        sample(Y0[,x],n_allocate[x])
      })
    }else{ # Allocate wrt allocation probs across treatments
      # Account for possibly reduced allocation size in final step
      allocation_size <- ifelse(j!=interim_steps, allocation_size, N_samp %% allocation_size)
      n_allocate <- c(1:4,sample(1:trt_n,allocation_size,replace = T, 
                                 prob = allocation_prob)) |> table()-1
      n_samp <-n_allocate+n_samp # Note updated sample sizes
      Y <- lapply(1:4, function(x){# Randomly assign outcome respectively
        c(Y[[x]],sample(Y0[,x],n_allocate[x]))}) # Update Y
    }
    
    # Posterior draws from a beta distribution
    post_y_all <- do.call(cbind,lapply(Y, function(x){
      rbeta(n_post, alpha + sum(x), 
            beta + length(x) - sum(x))
    }))
    # Update allocation probability after posterior draws
    allocation_prob <- allocationUpdate(post_y_all, n_samp)
  }
  # Compare treatments with control and select best treatment
  treatmentComparison(post_y_all)
}

```

```{r}
# Compare design one to design two
bench::mark("Solution"=design1(y,h0=h0,h1=h1,h2=h2,h3=h3),
            "Submission"=designRAR(N_samp = 228,trt_n = 4,trt_effect = c(0.35,.45,.55,.65), 
                      alpha = 0.35,  beta = 0.65, n_post = 1000, allocation_size = 40, 
                      design_option = "F25" # Design option: c("F25", "RMatch")
                                   ),
           relative = TRUE, check = FALSE)

bench::mark("Soultion"=design2(y,N=N,nInterim = 40,h0=h0,h1=h1,h2=h2,h3=h3),
            "Submission"=designRAR(N_samp = 228,trt_n = 4,trt_effect = c(0.35,.45,.55,.65), 
                      alpha = 0.35,  beta = 0.65, n_post = 1000, allocation_size = 40, 
                      design_option = "RAR" # Design option: c("F25", "RMatch")
                                   ),
           relative = TRUE, check = FALSE)
```

# Part 3: Parallelization method
```{r}
N_samp = 228
trt_n = 4
trt_effect = c(0.35,.45,.55,.65)
alpha = 0.35
beta = 0.65
n_post = 1000
allocation_size = 40
design_option = "RMatch" # Design option: c("F25", "RMatch")
df <- function(i) {
  designRAR(N_samp = 228, # Total number of participants
                                     trt_n = 4, # Number of Arms
                                     trt_effect = c(0.35,.45,.55,.65), # treatment effect for each arm 
                                     alpha = 0.35,  beta = 0.65, # prior
                                     n_post = 1000, # number of posterior draws
                                     allocation_size = 40, # Initial Sample to allocate
                                     design_option = "F25" # Design option: c("F25", "RMatch")
                                     )
}
    
cores <- parallel::detectCores()
cl <- parallel::makePSOCKcluster(cores) 
parallel::clusterExport(cl, list("allocationUpdate","treatmentComparison",
                                 "designRAR"))

bench::mark("parallel"=parallel::parSapply(cl,1:1e3,
                           FUN=df),
            "replicate"=replicate(1e3,df()),
            relative = TRUE, check = FALSE)
```

